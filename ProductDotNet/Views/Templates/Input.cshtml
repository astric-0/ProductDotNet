<template id="inputCP">
    <div class="row form-group my-3">
        <label>{{ label + (required ? '*' : '') }}</label>
        <textarea v-if="type=='textarea'"  class="form-control mx-2 my-3" v-model="state[field]" @@input="validate" :placeholder="placeholder" :autofocus="autofocus">
        </textarea>
        <input v-else 
               :type="type" 
               class="form-control mx-2 my-1" 
               v-model="state[field]" 
               @@input="validate" 
               :placeholder="placeholder" 
               :autofocus="autofocus" 
        />
        <span class="text-danger">{{ error || '&nbsp;' }}</span>
    </div>
</template>

<script>
    const inputCP = {
        template: '#inputCP',
        
        props: {
            label: {
                type: String,
                default: ''
            },
            model: {
                type: Object,
                default: {
                    input: ''
                }
            },
            field: {
                type: String,
                default: 'input'
            },
            type: {
                type: String,
                default: 'text'
            },
            required: {
                type: Boolean,
                default: false
            },
            placeholder: {
                type: String,
                default: ''
            },

            autofocus: {
                type: Boolean,
                default: false
            },
            validator: Function,
            'error-cb': Function
        },
        
        setup(props) {
            const state = Vue.ref(props.model);
            const error = Vue.ref(false);
            
            const validate = _ => {
                const value = state.value[props.field]
                
                const len = 'string' == typeof value ? state.value[props.field]?.trim().length : 1;
                if (value && len != 0) {                    
                    if (props.validator) {
                        error.value = props.validator(value);                        
                        if (error.value) {
                            props.errorCb && props.errorCb(error.value); 
                            return;
                        }
                    }                      
                }
                
                else if (props.required === true && (!value || len == 0)) {
                    error.value = 'Field is required';
                    props.errorCb && props.errorCb(props.field + ' is required');
                    return;
                }

                error.value = false;
                props.errorCb && props.errorCb('');
            }

            Vue.onMounted(validate);

            return { state, error, validate };
        }
    }
</script>